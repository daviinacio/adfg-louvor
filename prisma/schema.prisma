datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  username   String   @unique
  email      String   @unique
  password   String
  avatar_url String?
  sys_admin  Boolean  @default(false)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_ids String[] @db.ObjectId
  roles    Role[]   @relation("user_role", fields: [role_ids], references: [id])

  sessions Session[] @relation("user_sessions")
  prises   Praise[]

  @@map("user")
}

model Role {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String  @unique
  is_active Boolean @default(true)

  user_ids String[] @db.ObjectId
  users    User[]   @relation("user_role", fields: [user_ids], references: [id])

  @@map("role")
}

model Session {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  token          String
  type           String    @default("bearer")
  expires_in     Int
  logged_at      DateTime  @default(now())
  inactivated_at DateTime?
  is_active      Boolean   @default(true)

  user_id String @db.ObjectId
  user    User   @relation("user_sessions", fields: [user_id], references: [id])

  @@index([user_id])
  @@map("session")
}

model Artist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  vagalume_id String?
  created_at  DateTime @default(now())

  praises Praise[] @relation("artist_praise")

  @@map("artist")
}

model Praise {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  vagalume_id String?
  tone        String       @default("?")
  status      PraiseStatus
  transpose   Int          @default(0)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now())

  suggested_by_id String? @db.ObjectId
  suggested_by    User?   @relation(fields: [suggested_by_id], references: [id])

  artist_id String @db.ObjectId
  artist    Artist @relation("artist_praise", fields: [artist_id], references: [id])

  lyrics_id String? @db.ObjectId
  lyrics    Lyrics? @relation("praises_lyrics")

  tags_ids String[] @db.ObjectId
  tags     Tag[]    @relation("praises_tags", fields: [tags_ids], references: [id])

  @@unique([name, artist_id], name: "praises_name_unique")
  @@index([artist_id])
  @@index([suggested_by_id])
  @@map("praise")
}

model Lyrics {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  praise_id String? @unique @db.ObjectId
  praise    Praise? @relation("praises_lyrics", fields: [praise_id], references: [id])

  @@map("lyrics")
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String   @unique
  prise_ids String[] @db.ObjectId
  praises   Praise[] @relation("praises_tags", fields: [prise_ids], references: [id])

  @@map("tag")
}

enum PraiseStatus {
  APPROVED
  REHEARSING
  SUGGESTION
}
